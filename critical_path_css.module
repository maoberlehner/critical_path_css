<?php

/**
 * @file
 * Inline critical CSS styles
 */

/**
 * Implements template_process_html().
 */
function critical_path_css_process_html(&$vars) {
  // Inline CSS needed to render the critical path and load
  // the rest of the CSS files via loadCSS custom JS function
  // More infos about loadCSS https://github.com/filamentgroup/loadCSS
  if (_critical_path_css_is_active()) {
    $script = 'function loadCSS(e,t,n){"use strict";var i=window.document.createElement("link");var o=t||window.document.getElementsByTagName("script")[0];i.rel="stylesheet";i.href=e;i.media="only x";o.parentNode.insertBefore(i,o);setTimeout(function(){i.media=n||"all"})}';

    // Find all stylesheets with "all" or "screen" media attribute
    preg_match_all('#href="(.+?)" media="(all|screen)"#', $vars['styles'], $css);
    // Remove <link> tags with "all" or "screen" media attribute from styles
    $vars['styles'] = preg_replace('#\<link(.+?)media="(all|screen)" \/\>#', '', $vars['styles']);
    // Add <noscript> tag as fallback if JavaScript is disabled
    $noscript = '';
    // Add a loadCSS function for every stylesheet
    // and wrap <link> tags with the <noscript> tag
    foreach ($css[1] as $k => $file) {
      $script .= 'loadCSS("' . $file . '");';
      $noscript .= '<link rel="stylesheet" href="' . $file . '" />';
    }
    // Load critical path CSS
    $critical_path_css = _critical_path_css_get_inline_css();
    // Add the inlined critical path CSS code to the styles variable
    $vars['styles'] .= '<style>' . $critical_path_css . '</style>';
    // Inject <noscript> tag
    $vars['styles'] .= '<noscript>' . $noscript . '</noscript>';
    // Add the loadCSS code to the page bottom
    $vars['page_bottom'] .= '<script>' . $script . '</script>';
  }
}

/**
 * Implements hook_form_alter().
 */
function critical_path_css_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  $form['critical_path_css'] = array(
    '#type' => 'fieldset',
    '#title' => t('Critical Path CSS'),
    '#description' => t('External CSS stylesheets are render-blocking, meaning the browser won’t paint content to the screen until all of your CSS – specifically, media="screen" CSS – arrives. The solution to this is inlining the initially needed (above-the-fold) CSS for your page and loading the rest of your CSS when the page is ready. Read more about critical path css: @more_info_link', array('@more_info_link' => 'http://addyosmani.com/blog/tag/critical-path-css')),
  );
  $form['critical_path_css']['critical_path_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Inline critical path css'),
    '#default_value' => variable_get('critical_path_css', 0),
  );
  $form['critical_path_css']['critical_path_css_paths'] = array(
    '#type' => 'textarea',
    '#title' => t('File paths of CSS files that should be inlined'),
    '#description' => t('One file path per line. File paths must be relative to the drupal installation directory!'),
    '#default_value' => variable_get('critical_path_css_paths', ''),
  );
}

function _critical_path_css_is_active() {
  return variable_get('critical_path_css') &&
         variable_get('preprocess_css') &&
         (function_exists('path_is_admin') ? !path_is_admin(current_path()) : TRUE);
}

/**
 * Load CSS code of the critical path CSS files and cache it
 * @return string inline CSS code
 */
function _critical_path_css_get_inline_css() {
  $inline_css = &drupal_static(__FUNCTION__);
  if (!isset($inline_css)) {
    // Load inline CSS code from cache if available
    if ($cache = cache_get('critical_path_css_inline_css')) {
      $inline_css = $cache->data;
    }
    else {
      // Load inline CSS code from file paths
      $file_paths = explode("\r\n", variable_get('critical_path_css_paths'));
      foreach ($file_paths as $file_path) {
        if (is_file($file_path)) {
          $inline_css .= file_get_contents($file_path);
        }
      }
      // Save inline CSS code in the cache
      cache_set('critical_path_css_inline_css', $inline_css, 'cache');
    }
  }
  return $inline_css;
}